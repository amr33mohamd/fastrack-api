{
  "_args": [
    [
      {
        "raw": "neat-log@^1.0.0",
        "scope": null,
        "escapedName": "neat-log",
        "name": "neat-log",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "E:\\Projects\\fastrack-api\\node_modules\\count-files"
    ]
  ],
  "_from": "neat-log@>=1.0.0 <2.0.0",
  "_id": "neat-log@1.1.2",
  "_inCache": true,
  "_location": "/neat-log",
  "_nodeVersion": "8.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/neat-log-1.1.2.tgz_1506463366914_0.6523205537814647"
  },
  "_npmUser": {
    "name": "jhand",
    "email": "joe@hand.email"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "neat-log@^1.0.0",
    "scope": null,
    "escapedName": "neat-log",
    "name": "neat-log",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/count-files"
  ],
  "_resolved": "http://registry.npmjs.org/neat-log/-/neat-log-1.1.2.tgz",
  "_shasum": "cb0d5feabb27bca572047bea955448546dca0291",
  "_shrinkwrap": null,
  "_spec": "neat-log@^1.0.0",
  "_where": "E:\\Projects\\fastrack-api\\node_modules\\count-files",
  "author": {
    "name": "Joe Hand",
    "email": "joe@hand.email"
  },
  "bugs": {
    "url": "https://github.com/joehand/neat-log/issues"
  },
  "dependencies": {
    "lodash.throttle": "^4.1.1",
    "nanobus": "^3.0.0",
    "status-logger": "^3.1.1"
  },
  "description": "a neat logger for the command line",
  "devDependencies": {
    "prompt": "^1.0.0",
    "standard": "*",
    "tap-spec": "^4.0.2",
    "tape": "^4.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-LUk9cZY/FakJlQ7OcZaHakNV0AzBwfx9iqU4hwYx7NhVYBjZBeykmcHJD5y+cfVWpyaHdjIYnb+gKTVkS+DlSg==",
    "shasum": "cb0d5feabb27bca572047bea955448546dca0291",
    "tarball": "https://registry.npmjs.org/neat-log/-/neat-log-1.1.2.tgz"
  },
  "gitHead": "b4127307de7aec569b661c4b249306b3936892b7",
  "homepage": "https://github.com/joehand/neat-log",
  "keywords": [],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jhand",
      "email": "joe@hand.email"
    },
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    },
    {
      "name": "clkao",
      "email": "clkao@clkao.org"
    },
    {
      "name": "yoshuawuyts",
      "email": "i@yoshuawuyts.com"
    },
    {
      "name": "juliangruber",
      "email": "julian@juliangruber.com"
    },
    {
      "name": "kriesse",
      "email": "mail@kristinaschneider.com"
    },
    {
      "name": "maxogden",
      "email": "max@maxogden.com"
    },
    {
      "name": "karissa",
      "email": "krmckelv@gmail.com"
    }
  ],
  "name": "neat-log",
  "optionalDependencies": {},
  "readme": "# neat-log\n\n[![npm][npm-image]][npm-url]\n[![travis][travis-image]][travis-url]\n[![standard][standard-image]][standard-url]\n\nA neat logger for command line tools, inspired by [Choo](https://github.com/yoshuawuyts/choo)! I've heard so much about how awesome front-end javascript has gotten, I wanted to bring some of that magic to command line applications. Used in the [Dat](https://github.com/datproject/dat) command line tool.\n\n* Use tagged template literals to output to console log.\n* Automatically diff template output with existing console (via [ansi-diff-stream](https://github.com/mafintosh/ansi-diff-stream)) (pretty much React for your terminal).\n* Update console output in any order with event based output.\n* Pretty neat!\n\n## Example\n\nEach neat logger has two components: a `view` and functions that modify state and emit events.\n\n```js\nvar neatLog = require('neat-log')\nvar output = require('neat-log/output')\n\nvar neat = neatLog(view)\nneat.use(countTheSeconds)\n\nfunction view (state) {\n  // This gets printed to the console! Wow. So neat.\n  return output`\n    Hello World!\n    I've been running for ${state.seconds} second${state.seconds === 1 ? '' : 's'}.\n  `\n}\n\nfunction countTheSeconds (state, bus) {\n  state.seconds = 0\n  setInterval(function () {\n    state.seconds++\n    bus.emit('render')\n  }, 1000)\n  bus.emit('render')\n}\n```\n\nThis example will print to the console: \n\n```\nHello world!\nI've been running for 0 seconds.\n```\n\nAnd update every second!\n\nMore examples:\n\n* [example folder](/examples)\n* [count-files](https://github.com/joehand/count-files) - basic example with a single view and use function.\n* [dat](https://github.com/datproject/dat) - full command line application with multiple views, components, etc.\n\n## Install\n\n```\nnpm install neat-log\n```\n\n## API\n\nHeavily inspired by Choo! If you get confused here, check docs there because they are much nicer =).\n\n### `var neat = neatLog(view(state), [opts])`\n\n* `views` is a single function or array of functions that return string(s) to output to the console. `views` are passed the `state` as the first argument.\n* `opts.logspeed` (default 250ms) - throttles how often output is rendered.\n* `opts.quiet` - shhhh.... do not print anything\n* `opts.debug` - print the whole view every time render is called.\n\nBoth `opts.quiet` and `opts.debug` are handled in `status-logger`.\n\n### `neat.use(callback(state, bus))`\n\nUse a `function (state, bus)` to change state and emit events via the bus. You can call `bus.emit()` to emit a new event and `bus.on()` to listen. Emitter is an instance of [nanobus](https://github.com/yoshuawuyts/nanobus/).\n\n`bus` also has some special functions exposed:\n\n#### `bus.render()`\n\nCause an immediate render (normally it'd be throttled). This is helpful to do before exiting.\n\n#### `bus.clear()`\n\nClear all existing output. This is useful to do before throwing error messages:\n\n```js\nbus.clear()\nconsole.error('my error')\nprocess.exit(1)\n```\n\n### `neat.render()`\n\nFor an immediate render. Helpful outside of a use function.\n\n### `neat.reset()`\n\nReset the ansi-diff-stream instance. Can help fix broken lines or other weird printing output. Happens automatically on terminal resize.\n\n### `var output = require('neat-log/output')`\n\nGet a tagger for your template literals to make them nicer. Removes spaces and stuffâ„¢.\n\n## TODO\n\n* Use `bus.on('*')` to make a cool debug option\n* Be smarter about when lines break to multiple lines.\n* Other neat things\n\n## License\n\n[MIT](LICENSE.md)\n\n[npm-image]: https://img.shields.io/npm/v/neat-log.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/neat-log\n[travis-image]: https://img.shields.io/travis/joehand/neat-log.svg?style=flat-square\n[travis-url]: https://travis-ci.org/joehand/neat-log\n[standard-image]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\n[standard-url]: http://npm.im/standard\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/joehand/neat-log.git"
  },
  "scripts": {
    "test": "standard"
  },
  "version": "1.1.2"
}
